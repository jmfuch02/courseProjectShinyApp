x
x <- vector()
x
x <- c(0.5, 0.6)
y <- c(1.7, "a")
y
y <- c(TRUE, 2)
as.numeric(y)
m <- 1:20
m <- 1:10
dim(m) <- c (3,4)
dim(m) <- c (2,5)
a <- list(1, "a", TRUE, i+4i)
a <- list(1, "a", TRUE, 1+4i)
a
a <- list(1, 2, TRUE, 1+4i)
a
x <- c("a", "b", "c", "d", "a")
x[1]
u <- x > "a"
u
u[2]
x[u]
x <- c("a", "b", "c", "c", "d", "a")
u <- x > "a"
y <- list(foo = 1:4, bar = 0.6)
y
y[1]
y[[1]]
y$bar
y["bar"]
y[["bar"]]
a <- y["bar"]
b <- y[["bar"]]
y <- data.frame(a = 1, b = "a")
dput(y)
y
setwd(c:\users\jfuchs\rstats_wdir)
setwd("c:\users\jfuchs\rstats_wdir")
setwd(c:\Users\jfuchs\rstats_wdir)
setwd(c:/Users/jfuchs/rstats_wdir)
setwd(\users\jfuchs\rstats_wdir)
getwd()
q()
x <- 4L
class(x)
x <- c(4, TRUE)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
z <- cbdind(x,y)
z <- cbind(x,y)
class(z)
a <- list(2, "a", "b", TRUE)
a[[2]]
b <- a[[2]]
class(b)
x <- 1:4
y< - 2
y <- 2
z = x + y
x <- c(17,14,4,5,13,12,10)
read.csv("\rprog-data-quiz1_data\hw1_data.csv")
read.csv("\\rprog-data-quiz1_data\\hw1_data.csv")
read.csv("//rprog-data-quiz1_data//hw1_data.csv")
getwd()
read.csv("~/rprog-data-quiz1_data/hw1_data.csv")
read.csv("/rprog-data-quiz1_data/hw1_data.csv")
getwd()
read.csv(file = "/rprog-data-quiz1_data/hw1_data.csv")
read.csv(file = "\\rprog-data-quiz1_data\\hw1_data.csv")
help(read.csv)
dir()
cd(rprog-data-quiz1_data)
read.csv(file = "hw1_data.csv")
data <- read.csv(file = "hw1_data.csv")
data[2:]
data[2]
data[,:2]
datalines <- readLines(data, 10)
data[6,1:2]
data[6,1:3]
data[1:2,1:6]
data[1:2,]
data[152:153,]
data[47,]
data["Ozone"]
badOzone = data["Ozone" = NA]
badOzone = data["Ozone"]
badOzone = is.na(data["Ozone"])
data[5,]
badOzone
length(badOzone[badOzone==FALSE])
length(badOzone[badOzone==TRUE])
mean(badOzone[badOzone==FALSE])
mean(badOzone)
mean(data[Ozone])
mean(data["Ozone"])
data["Ozone"]
mean(data)
mean(data[Ozone])
mean(data[$Ozone])
data[1]
mean(data[1])
help(mean)
numdata=as.numeric(data)
numdata=as.numeric(data[1])
numdata <- as.numeric(data[1])
ozone <- data[1]
as.numeric(ozone)
mean(ozone)
numdata <- as.numeric(levels(data))[data]
numdata <- as.numeric(levels(data))["Ozone"]
data[1]
data[$Oz]
data["Ozone"]
class(data)
data["Ozone"]
mean(data["Ozone"])
numozone <- as.numeric(data["Ozone"])
colmeans(data, na.rm=TRUE)
colMeans(data, na.rm=TRUE)
subdata <- data["Ozone" > 31]
subdata
subdata <- data[data[1] > 31]
class(subdata)
gooddata <- complete.cases(data)
data[gooddata, ][1:6, ]
data[gooddata, ]
data[gooddata, ][1:6, ]
data[gooddata, ][1:6, ]["Ozone" > 30]
data[gooddata, ]["Ozone" > 30, ]
data[ozone]
data["Ozone"]
data[gooddata, ][data["Ozone"] > 30, ]
data[data["Ozone"] > 30, ]
[data["Ozone"] > 30, ]
data["Ozone"] > 30
data[c(1,3)]
data[1>30]
data[1>30, ]
data[data[1]>30, ]
data[data[1]>30, ][gooddata, ]
good <- gooddata
gooddata <- data[good, ]
gooddata
gooddata[gooddata[1]>30, ]
gooddata[gooddata["Ozone"]>30, ]
gooddata[gooddata["Ozone"]>31, ][gooddata["Temp"]>90, ]
subdata <- gooddata[gooddata["Ozone"]>30, ]
subdata <- gooddata[gooddata["Ozone"]>31, ]
subdata <- subdata[subdata["Temp"]>90, ]
subdata
colmeans(subdata, na.rm=TRUE)
colMeans(subdata, na.rm=TRUE)
subdata2 <- data[data["Month"]=6, ]
subdata2 <- data[data["Month"]==6, ]
goodsub2 <- is.na(subdata2)
subdata2[goodsub2, ]
subdata2[!goodsub2, ]
subdata2
colMeans(subdata2, na.rm=FALSE)
colMeans(subdata2, na.rm=TRUE)
data[data["Month"]==5]
data[data["Month"]==5, ]
month5 <- data[data["Month"]==5, ]
help(max)
hep(colmax)
help(colmax)
help(colMax)
max(help["Ozone"])
max(month5["Ozone"])
max(month5["Ozone"], na.rm = TRUE)
add2 <- function(x, y) {
x + y
}
add2(2,3)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means # this gets returned
}
search()
help(gl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
mean(x)
traceback()
x <- 1
traceback()
library(datasets)
data(iris)
?iris
summary(iris)
head(iris)
mean(iris[$Species == virginica,])
mean(iris[iris$Species == virginica,])
str(iris)
iris$Species
iris(which(iris$Species == "virginica"), )
iris[which(iris$Species == "virginica"), ]
mean(iris[which(iris$Species == "virginica"), ])
vdat <- iris[which(iris$Species == "virginica"), ]
View(vdat)
mean(vdat$Species)
mean(vdat$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hpower <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hpower[,3]
hpower
str(hpower)
hpower(3) - hpower(2)
hpower[3]-hpower[2]
hpower[3]-hpower[1]
debug(ls)
ls
ls()
q
?browse
?clear
str(x)
str(z)
str(str)
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/best.R')
?nrows()
?nrows
??nrows
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("MD", "heart attack", 4)
setwd("C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data")
rankhospital("MD", "heart attack", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart attack", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
state <= "MD"
state <- "MD"
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
outcome_subset[,11] <- as.numeric(na.omit(outcome_subset[,11]))
View(outcome_subset)
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
View(outcome_subset)
str(outcome_subset)
outcome_subset[,11] <- na.omit(as.numeric(outcome_subset[,11]))
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
outcome_subset[,11] <- as.numeric(outcome_subset[,11])
outcome_subset <- outcome_subset[complete.cases(outcome_subset[,11])]
View(outcome_subset)
outcome_subset <- outcome_subset[complete.cases(outcome_subset[,11]),]
View(outcome_subset)
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
getwd()
setwd("C:/Users/Jason/Documents/coursera")
getwd()
q()
setwd("~/Coursera")
?qunif
qunif(1)
qunif(0.75)
qunif(1, 0, 2)
qunif(0.5, 0, 2)
qunif(0.75, 0, 2)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(p)
sum(x ^ 2 * p) - sum(x * p)^2
sum(x * p)
?pnorm
pnorm(70, mean = 80, sd = 10)
pnorm(1)
pnorm(-1)
1.645*75
+1100
123.375
123.375+1100
qnorm(.95, mean = 1100, sd = 75)
75/sqrt(100)
1100+1.645*7.5
qnorm(.95, mean = 1000, sd = 7.5)
qnorm(.95, mean = 1100, sd = 7.5)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
means
rnorm(1)
rnorm(1)
rnorm(2)
plot(means)
n <- 5000
means <- cumsum(rnorm(n))/(1:n)
plot(means)
means <- cumsum(rnorm(n))/(1:n)
plot(means)
means <- cumsum(rnorm(n))/(1:n)
plot(means)
install.packages("knitr")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("markdown")
m1 <- 1/100
m2 <- 10/1787
m1 - m2
se1 <- (m1*(1-m1)/100)
pnorm(-1.87)
se1 <- (m1*(1-m1)/100)
se <- (m1*(1-m1)/100)
z = (m1-m2)/se
pnorm(z)
z = (m1-m2)/se
z = (m2-m1)/se
se <- sqrt((m1*(1-m1)/100))
z = (m2-m1)/se
se <- sqrt((m1*(1-m1))/100)
se <- sqrt((m1*(1-m1))/100)
z = (m2-m1)/se
pnorm(z)
se <- sqrt((m1*(1-m1))/1787)
z = (m2-m1)/se
pnorm(z)
qt(0.975, 8)
t <- qt(0.975, 8)
se <- sqrt((1.5^2/9)+(1.8^2/9))
se <- sqrt(((1.5^2)+(1.8^2))/9)
1.5^2
1.8^2
1.5^2 + 1.8^2
(1.5^2 + 1.8^2)/9
sqrt((1.5^2 + 1.8^2)/9)
se <- sqrt((1.5^2 + 1.8^2)/9)
t * se
se <- sqrt((1.5^2 + 1.8^2)/9)
se <- (3.3)/sqrt(9)
se <- sqrt((1.5^2 + 1.8^2)/9)
4 + t*se
4 - t*se
se <- sqrt((1.5^2 + 1.8^2)/9)
?qt
0.025 * 2
1.5^2/9
((1.5^2/9)+(1.8^2/9))^2
top <- ((1.5^2/9)+(1.8^2/9))^2
top <- ((1.5^2/9)+(1.8^2/9))^2
bottom <- (((1.5^2/9)^2)/8) + ((1.8^2/9)^2)/8
top/bottom
qt(0.975, 15.5)
1/.4
0.04/10
se <- 0.04/10
.01/se
t <- qt(0.95,99)
t
x <- .01/se
x <- .01/se; x
t <- qt(0.95,99); t
t/x
qnorm(0.95)
t <- qt(0.95,99); t
z <- qnorm(0.95)
z/x
alpha <- 0.05
z <- qnorm(1 - alpha)
z <- qnorm(1 - alpha); z
mu0 <- 0
mua <- 0.01
sigma <- 0.04
n <- 100
alpha <- 0.05
mu0 <- 0
mua <- 0.01
sigma <- 0.04
n <- 100
z <- qnorm(1 - alpha); z
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
alpha <- 0.05
mu0 <- 0
mua <- 0.01
sigma <- 0.04
z <- qnorm(1 - alpha); z
n <- 1000
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 100
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 500
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 200
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 110
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 120
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 140
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1-(3/36)
deck
52
4/52
0
12/52
2/52
2/51
0.64
0.64
mypdf
integrate(mypdf, 0, 1.6)
1/4
sqrt(2)
0.997*0.001
(1-.985)*(1-0.001)
(0.997*0.001) / (0.997*0.001 + (1-.985)*(1-0.001))
coinPlot(10)
coinPlot(10000)
qnorm(.95)
bye()
data(swiss); par(mfrow = c(2,2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
?influence.measures
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
?shuttle
?library
data(shuttle)
?MASS
install.packages("MASS")
install.packages("MASS")
data(shuttle)
setwd("~/Coursera/2015-05_dataProducts/courseProjectShinyApp")
shiny::runApp('shinyCode')
?mortgage
source("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/My_R_Scripts/mortgage.R")
mortgage(P=135000, I=4.875, L=30)
View(aDFmonth)
source("mortgage.R")
source("shinyCode/mortgage.R")
View(aDFmonth)
?row.names
shiny::runApp('shinyCode')
shiny::runApp('shinyCode')
shiny::runApp('mortgageCalculator')
